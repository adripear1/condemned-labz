{% comment %} This file is auto-generated. Do not edit this file. {% endcomment %}
{% stylesheet %}
  .ss-quantity-block label {
    display: inline-block;
    padding-block: 8px;
  }

  .ss-quantity-button-wrapper {
    display: flex;
    align-items: stretch;
  }

  .ss-minus-button {
    border-start-start-radius: 4px;
    border-end-start-radius: 4px;
  }

  .ss-plus-button {
    border-start-end-radius: 4px;
    border-end-end-radius: 4px;
  }

  .ss-quantity-button {
    width: min(25%, fit-content);
    border: 1px solid #000;
    background-color: #fff;
    padding: 12px;
    font-size: calc(var(--ss-font-body-scale) * 1.8rem);
  }

  .ss-quantity-input {
    width: 100%;
    border-inline-width: 0px;
    border-block-width: 1px;
    padding: 12px;
    color: currentColor;
    font-size: calc(var(--ss-font-body-scale) * 1.6rem);
    font-weight: 500;
    text-align: center;
    background-color: #fff;
    width: 100%;
    flex-grow: 1;
    -webkit-appearance: none;
    appearance: none;
  }

  .ss-quantity-input::-webkit-outer-spin-button,
  .ss-quantity-input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  .ss-quantity-input[type='number'] {
    -moz-appearance: textfield;
  }
{% endstylesheet %}

{% javascript %}
  class QuantityInput extends HTMLElement {
    constructor() {
      super();
      this.inputElement = this.querySelector('input');
      this.#prepareEventHandlers();
    }

    #prepareEventHandlers() {
      const minusButton = this.querySelector('[name="minus"]');
      const plusButton = this.querySelector('[name="plus"]');

      [minusButton, plusButton].forEach((button) => {
        button.addEventListener('click', this.#onButtonClick);
      });
    }

    #onButtonClick = (event) => {
      event.preventDefault();
      const currentValue = parseInt(this.inputElement.value);
      const newValue = event.target.name === 'plus' ? currentValue + 1 : currentValue - 1;
      this.inputElement.value = newValue > 0 ? newValue : 1;
    };
  }

  if (!customElements.get('ss-quantity-input')) {
    customElements.define('ss-quantity-input', QuantityInput);
  }
{% endjavascript %}

{% liquid
  if block.settings.product != blank
    assign target = block.settings.product
  endif

  assign product_form_id = 'ss-product-form-' | append: section.id
%}

{% capture style_panel_vars %}
  {% render 'ss-style-panel-v-1-0',
    settings: block.settings,
    type: 'size,spacing'
  %}
{% endcapture %}

<div
  class='
    ss-quantity-block
    ss-block
    ss-size-panel
    ss-spacing-panel
  '
  style='{{ style_panel_vars }}'
  {{ block.shopify_attributes }}
  data-section='{{ section.id }}{{ target.id }}'
  data-input-name='quantity'
>
  <label for='product-{{ block.id }}-{{ target.id }}'>Quantity</label>
  <ss-quantity-input class='ss-quantity-button-wrapper'>
    <button class='ss-quantity-button ss-minus-button' type='button' name='minus'>-</button>
    <input
      type='number'
      id='product-{{ block.id }}-{{ target.id }}'
      class='ss-quantity-input'
      name='quantity'
      min='1'
      value='1'
      form='{{ product_form_id }}'
    >
    <button class='ss-quantity-button ss-plus-button' type='button' name='plus'>+</button>
  </ss-quantity-input>
</div>

{% schema %}
{
  "name": "Product (quantity) 1-0",
  "tag": null,
  "settings": [
    {
      "type": "product",
      "id": "product",
      "label": "Product"
    },
    {
      "type": "header",
      "content": "Size - Desktop"
    },
    {
      "type": "text",
      "id": "size_width",
      "label": "Width",
      "default": "auto"
    },
    {
      "type": "text",
      "id": "size_min-width",
      "label": "Min Width",
      "default": "auto"
    },
    {
      "type": "text",
      "id": "size_max-width",
      "label": "Max Width",
      "default": "none"
    },
    {
      "type": "text",
      "id": "size_height",
      "label": "Height",
      "default": "auto"
    },
    {
      "type": "text",
      "id": "size_min-height",
      "label": "Min Height",
      "default": "auto"
    },
    {
      "type": "text",
      "id": "size_max-height",
      "label": "Max Height",
      "default": "none"
    },
    {
      "type": "text",
      "id": "size_flex-grow",
      "label": "Flex Grow",
      "default": "0"
    },
    {
      "type": "text",
      "id": "size_flex-shrink",
      "label": "Flex Shrink",
      "default": "1"
    },
    {
      "type": "text",
      "id": "size_flex-basis",
      "label": "Flex Basis",
      "default": "auto"
    },
    {
      "type": "header",
      "content": "Size - Mobile"
    },
    {
      "type": "paragraph",
      "content": "Leave fields blank to use the desktop value"
    },
    {
      "type": "text",
      "id": "size_width-mobile",
      "label": "Width",
      "default": "100%"
    },
    {
      "type": "text",
      "id": "size_min-width-mobile",
      "label": "Min Width"
    },
    {
      "type": "text",
      "id": "size_max-width-mobile",
      "label": "Max Width"
    },
    {
      "type": "text",
      "id": "size_height-mobile",
      "label": "Height"
    },
    {
      "type": "text",
      "id": "size_min-height-mobile",
      "label": "Min Height"
    },
    {
      "type": "text",
      "id": "size_max-height-mobile",
      "label": "Max Height"
    },
    {
      "type": "text",
      "id": "size_flex-grow-mobile",
      "label": "Flex Grow"
    },
    {
      "type": "text",
      "id": "size_flex-shrink-mobile",
      "label": "Flex Shrink"
    },
    {
      "type": "text",
      "id": "size_flex-basis-mobile",
      "label": "Flex Basis"
    },
    {
      "type": "header",
      "content": "Spacing - Desktop"
    },
    {
      "type": "text",
      "id": "spacing_padding",
      "label": "Padding",
      "default": "0px",
      "info": "Accepts CSS"
    },
    {
      "type": "text",
      "id": "spacing_margin",
      "label": "Margin",
      "default": "0px",
      "info": "Accepts CSS"
    },
    {
      "type": "header",
      "content": "Spacing - Mobile"
    },
    {
      "type": "paragraph",
      "content": "Leave fields blank to use the desktop value"
    },
    {
      "type": "text",
      "id": "spacing_padding-mobile",
      "label": "Padding",
      "info": "Accepts CSS"
    },
    {
      "type": "text",
      "id": "spacing_margin-mobile",
      "label": "Margin",
      "info": "Accepts CSS"
    }
  ],
  "presets": [
    {
      "name": "Product (quantity) 1-0",
      "settings": { "product": "{{ closest.product }}" }
    }
  ]
}
{% endschema %}
